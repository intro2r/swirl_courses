- Class: meta
  Course: Graphics
  Lesson: Modifying Standard Plots
  Author: Simon Queenborough & Andrew Muehleisen
  Type: Standard
  Organization: Yale FES
  Version: 0.0.1

- Class: text
  Output: "Now that you're equipped to select the perfect plot for your data, let's learn how to further modify standard plots for our
  needs."
    
- Class: cmd_question
  Output: "We will use a small subset of the sparrows dataset, called 'BirdData'. Look at the data 
    now, type BirdData."
  CorrectAnswer: BirdData
  AnswerTests: omnitest(correctExpr='BirdData')
  Hint: BirdData, BirdData, BirdData

- Class: text
  Output: "## Point v line plot"

- Class: text
  Output: "Let's learn how to set the `type = ` argument of our plots, allowing us adjust the exact representation of our data."

- Class: cmd_question
  Output: "Plot Head as a function of Tarsus, setting the data = argument."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData)
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData)')
  Hint: plot(Head ~ Tarsus, data = BirdData)
  
- Class: cmd_question
  Output: "Now let's change the `type = ` argument to represent the points as a line. Go ahead and re-plot the data, setting the type 
  argument to 'l', meaning that you wish to join the points with lines."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, type = 'l')
  AnswerTests: omnitest(correctExpr="plot(Head ~ Tarsus, data = BirdData, type = 'l')")
  Hint: plot(Head ~ Tarsus, data = BirdData, type = 'l')
  
- Class: text
  Output: "Not actually a great way to represent our data! But it's good to know how to do. We often want to convert a scatterplot to 
  a line when we're plotting longitudinal data, like a time series, where we are interested in the trajectory of a variable. Take a look
  at the `type =` argument in the `plot()` help file to see other options."

- Class: text
  Output: "## Changing the size of plot elements"

- Class: text
  Output: "Now lets look at the 'cex' (character expansion) argument. We can use 'cex' to scale all or some elements in our plot."
  
- Class: cmd_question
  Output: "By default, `cex = ` scales the size of the points in a plot. Go ahead and re-plot `$Head` as a function of `$Tarsus`, setting the 
  data argument and `cex = 2`. Revert back to making the default scatterplot."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, cex = 2)
  AnswerTests: omnitest(correctExpr="plot(Head ~ Tarsus, data = BirdData, cex = 2)")
  Hint: plot(Head ~ Tarsus, data = BirdData, cex = 2)
  
- Class: cmd_question
  Output: " `cex = ` can also be targeted at specific plotting elements. Plot the same data, but instead of setting `cex = `, set `cex.lab = ` 
  to 2."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, cex.lab = 2)
  AnswerTests: omnitest(correctExpr="plot(Head ~ Tarsus, data = BirdData, cex.lab = 2)")
  Hint: plot(Head ~ Tarsus, data = BirdData, cex.lab = 2)
  
- Class: text
  Output: "Check the help file for `par()` to see other options for `cex =`."
  
- Class: text
  Output: "## A brief digression on colour"
  
- Class: text
  Output: "While we've used colour before, let's discuss it a little. Colour is very useful for various things in graphics, 
    mostly in terms of illustrating different groups of data. In the past, most journals 
    were only printed in black and white, so different shades of grey were important."
    
- Class: text
  Output: "R has 102 unique shades of grey. See this blogplost, if you want: 
    https://www.r-bloggers.com/50-shades-of-grey-according-to-r/."

- Class: text
  Output: "R also has access to a very wide range of colours (including grey). Colours can be accessed 
    in a variety of ways; (i) by number, e.g., `col = 1` for black, or `col = 2` for red;
    (ii) by name, e.g., `col = 'black'`; (iii) by hexadecimal code, e.g., `col = '#FF0000'`; 
    (iv) or RGB value, e.g., `col = rgb(0,0,0)`. We can even give colors transparency with `rgb()` using the 'alpha' argument."

- Class: cmd_question
  Output: "Try changing the colour of the data points in the figure to red, using the name. The colours
    will be more obvious if you also use a different plotting character, so use `pch = 20`."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, pch = 20, col = 'red')
  AnswerTests: any_of_exprs('plot(Head ~ Tarsus, data = BirdData, pch = 20, col = "red")',
                            'plot(Head ~ Tarsus, data = BirdData, col = "red", pch = 20)')
  Hint: plot(Head ~ Tarsus, data = BirdData, pch = 20, col = 'red')

- Class: cmd_question
  Output: "When used in a scatterplot, the argument 'col = ' changes the 
    colours of the plotting symbols. What does this argument do when applied
    to a boxplot? Add the color red to a plot of Head on Species." 
  CorrectAnswer: boxplot(Head ~ Species, data = BirdData, col = 'red')
  AnswerTests: any_of_exprs('boxplot(Head ~ Species, data = BirdData, col = "red")',
                            'plot(Head ~ Species, data = BirdData, col = "red")')
  Hint: boxplot(Head ~ Species, data = BirdData, col = 'red')
  
- Class: text
  Output: "Adding the argument 'col = 'red'' to a boxplot fills in the boxes."

- Class: text
  Output: "In similar fashion to 'cex', You can use `col.lab = `, `col.main = `, and `col.axis = ` to 
    change the colour of these external parts of the plot, if needed."

- Class: text
  Output: "We will consider colour in greater detail in a later lesson."

- Class: text
  Output: "## Using vectors to modify plots"
  
- Class: text
  Output: "All of the parameters we have dealt with so far (colour, symbols, size, etc.)
    can be changed using vectors, rather than addressing each individual element."

- Class: text
  Output: "For example, instead of specifying that *all* the points should be 
    red, we can use a vector of colours to make each point a different colour. How
    might we do this?"
    
- Class: cmd_question
  Output: "Well, We have eight data points. We know that we can specify 
    colours with a number. How about setting `col = 1:8` in our plot of Head on Tarsus?
    Try that. (Remember to keep `pch = 20`; and also set `cex = 3` to make each point larger."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, col = 1:8, pch = 20, cex = 3)
  AnswerTests: any_of_exprs('plot(Head ~ Tarsus, data = BirdData, col = 1:8, pch = 20, cex = 3)',
                'plot(Head ~ Tarsus, data = BirdData, pch = 20, col = 1:8, cex = 3)',
                 'plot(Head ~ Tarsus, data = BirdData, cex = 3, col = 1:8, pch = 20)')
  Hint: plot(Head ~ Tarsus, data = BirdData, col = 1:8, pch = 20, cex = 3)

- Class: text
  Output: "Ok super. We can use a vector to set colours... how might this actually 
    be useful?"

- Class: cmd_question
  Output: "We could use colour to indicate different groups. We know the species of each
    sparrow in our data. This Species column is a factor variable, not numeric, but 
    try setting `col = Species`, modifying the previous code."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, col = Species, pch = 20, cex = 3)
  AnswerTests: any_of_exprs('plot(Head ~ Tarsus, data = BirdData, col = Species, pch = 20, cex = 3)', 
               'plot(Head ~ Tarsus, data = BirdData, pch = 20, col = Species, cex = 3)',
               'plot(Head ~ Tarsus, data = BirdData, cex = 3, pch = 20, col = Species)')
  Hint: plot(Head ~ Tarsus, data = BirdData, col = Species, pch = 20, cex = 3)

- Class: text
  Output: "Woo hoo! Colours correspond to species. R converted the factors to 
    integers according to their level (first level = 'A' = black; second level 
    = 'B' = red) and coloured their points. Cool beans!"

- Class: text
  Output: "## The `...` argument, par(), and plot()"
    
- Class: text
  Output: "In the previous class, to modify elements of the graphic we added various arguments to the function `plot()`. "

- Class: text
  Output: "However, if you look at the help file (?plot), there are only three arguments specified, `x`, `y`, and `...`:
    `plot(x, y, ...)`." 

- Class: text
  Output: "The elipses argument `...` is special and allows arguments for one function to be 
    passed through another function. Arguments such as `cex`, `pch`, etc. are not 
    arguments of the function `plot()`. These arguments are actually arguments for the graphical parameters
    function `par()` that is used to modify the appearance and layout of graphics." 

- Class: text
  Output: "There are a **lot** of parameters that you can control. Some
    you will use frequently, others will not be touched."

- Class: cmd_question
  Output: "All the arguments are listed on the `par()` help page ('?par'). 
    You should spend some time looking over this page to see what options are available. Open it up now,
    so you can refer to it as we progress through the lesson."
  CorrectAnswer: ?par
  AnswerTests: omnitest(correctExpr='?par')
  Hint: Remember that you use the question mark to access the help files from the Console... ?par
    
 
- Class: text
  Output: "As we said above, all the arguments discussed below can be placed within
    a call to `par()`, e.g., `par(pch = 13, cex = 2)`."

- Class: text
  Output: "One important thing to note is that any changes to the defaults of `par()` will result in these changes being applied to 
    *all* the subsequent plots that you create, whereas any changes you make within a call to `plot()`
    will only apply to that specific plot." 
    
- Class: text
  Output: "In this lesson we will stick with putting these arguments within `plot()`."

- Class: text
  Output: "As an aside, if you have used `par()` and want to clear these parameters, you will need to reset 
    the graphics window/s to the default parameters. Within RStudio, the easiest way is 
    to go to the >Plots menu above, and select 'Clear All. This will close all the open plots windows and reset the graphics
    parameters to their defaults."
  
- Class: text
  Output: "In terms of working with and creating graphics, a useful way of working is to 
    run code iteratively within the RStudio graphics windows to get the code to generate
    your figure correctly. Then, use a separate graphics device to create the final plot (more on 
    this specific operation later!)."


- Class: text
  Output: "## Axes"

- Class: text
  Output: "OK, let's get back to work ... First, we will look at some common modifications to the 
    axes of plots. In many cases the default range of the axes, tick mark position and orientation, and
    numbering scheme are not exactly what you (or your prefered publication) want., "

- Class: cmd_question
  Output: "We will use our example plot of Head on Tarsus again to illustrate these changes. First, remind
    yourself of the basic code to make that plot using the formula approach and data argument ..."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData)
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData)')
  Hint: plot(Head ~ Tarsus, data = BirdData)
    
- Class: text
  Output: "Great. Look carefully at the axes. The tick marks point outwards from the plot. 
          The argument is `tcl = `, the sign (+/-) indicates the direction ,
          and the length is expressed as a fraction of the height of a line of text. 
          The default is `tcl = -0.5`, i.e., the tick marks point outwards and are half the height 
          of a line of text."

- Class: cmd_question
  Output: "You can flip the direction (i.e., have the tick marks point into the plot) by making that
    value positive and also change the length of the tick marks. Try setting the tick marks
    to the full height of a line of text and pointing inwards. Remember, there is no
    need to call `par()` first, just put the argument inside the main `plot()` call."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, tcl = 1)
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, tcl = 1)')
  Hint: plot(Head ~ Tarsus, data = BirdData, tcl = 1)
    
- Class: text
  Output: "Another common modification is to change the orientation of the numbers 
    along the axes. The default is that the numbers are parallel to their respective axis.
    You can see this in the current plot that is displayed... along the x-axis the numbers are 
    horizontal and along the y-axis the numbers are rotated 90 degrees anti-clockwise."
    
- Class: cmd_question
  Output: "You can 
    change the style of these axis labels with the argument `las = `. 
    The default is parallel to the axis (`las = 0`), but you may often want to set them to be
    always horizontal (`las = 1`) or always perpendicular (`las = 2`), or even 
    always vertical (`las = 3`). Try setting the axes to always horizontal, in a new call to our basic plot command."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, las = 1)
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, las = 1)')
  Hint: plot(Head ~ Tarsus, data = BirdData, las = 1)
  
- Class: cmd_question
  Output: "Ok, now let's combine these two arguments and see what happens. Put the previous 
    new values of `las` and `tcl` in our plot command."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1)
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1)')
  Hint: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1)
    
- Class: text
  Output: "What do you see? We now have tick marks pointing inwards and horizontal tick labels. Doing these
    operations has led to some extra white space appearing around the edges of our plot, between the numbers 
    and the box where the tick marks 
    used to be. For someone as persnickity about graphics as me, this does not look quite right ... 'How might
    we decrease this space?' I hear you ask ... Well ..."
    
- Class: cmd_question
  Output: "As you might expect, there is an argument for that. Within `par`, the argument `mgp =` is a 
    vector of three elements that controls the number of lines out from the plot edge where the 
    axis title (mgp[1]), axis labels (mgp[2]) and axis line itself (mgp[3]) are placed.
    The default is `mgp = c(3, 1, 0)`. In our scenario, a more appealing distance between the axis labels
    and the axis itself is `mgp = c(2.5, 0.5, 0)`. Try that, adding the mgp argument to the previous code."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0))
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0))')
  Hint: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0))

- Class: text
  Output: "Great, that moved the axes labels closer in, which (I think!) looks better. See what fine-scale control
    you can have over the appearance of your figures? It's wonderful!"

- Class: cmd_question
  Output: "R generally sets the limits of the axes just wider than the data. There are several cases when
    you may want to change this, for example to set the lower limit to 0, or make both sides wider if you
    are plotting confidence limits and the default range is not wide enough. 
    Setting the arguments `xlim = ` and `ylim = ` (x- and y axis limits) will resolve this issue. Try setting the 
    x axis limits to 19 and 25. As with `mgp = `, you need to pass a vector here, in this case of only
    two elements setting the min and max of the axis. Add this argument to the previous code."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0), xlim = c(19, 25))
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0), xlim = c(19, 25))')
  Hint: plot(Head ~ Tarsus, data = BirdData, las = 1, tcl = 1, mgp = c(2.5, 0.5, 0), xlim = c(19, 25))

- Class: text
  Output: "As an aside, xlim and ylim are _not_ arguments to par; it would not make sense to have them apply to every 
    subsequent plot. These two arguments are sent by the `plot()` function to the `plot.window()` function, which sets
    up the coordinate system for that graphics window."

- Class: text
  Output: "R tries very hard to make the axes limits as pretty as possible. These are recomputed internally, so if 
    you resize your graphics window, they may even change in number and position. In particular, if you 
    make the window too narrow, R will drop some of the labels. Try playing with the size of the graphics
    window now."
    
- Class: cmd_question
  Output: "What if you wanted to ignore R, and decide on exactly *everything* about the axis labels,
    including the position of the tick marks and what labels went there? You can do it! However,
    first we would need remove the default axis and/or not have an axis plotted at all. We can 
    suppress plotting the x axis with the argument `xaxt = 'n'`, and the y axis with `yaxt = 'n'`.
    Try suppressing the x axis of our default basic plot (i.e., ignoring all the recent additions)." 
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, xaxt = 'n')
  AnswerTests: omnitest(correctExpr='plot(Head ~ Tarsus, data = BirdData, xaxt = "n")')
  Hint: plot(Head ~ Tarsus, data = BirdData, xaxt = 'n')

- Class: cmd_question
  Output: "Great.. this suppresses the axis tick marks and labels, but not the axis title.
    To suppress the axis title, we have to modify the `xlab = ` argument in `plot()` You 
    can do this with `xlab = ''` (i.e., a text string with nothing in it). Try that, too, adding to the 
    previous code."
  CorrectAnswer: plot(Head ~ Tarsus, data = BirdData, xaxt = 'n', xlab = '')
  AnswerTests: omnitest(correctExpr="plot(Head ~ Tarsus, data = BirdData, xaxt = 'n', xlab = '')")
  Hint: plot(Head ~ Tarsus, data = BirdData, xaxt = 'n', xlab = '')

- Class: cmd_question
  Output: "Now we can add in the axis that we want. To do this, we actually need to call 
    a separate function, `axis()`, which we would run as a new line in our plotting 
    commands. It cannot be nested within `plot()` or `par()`. Anyway, a call to `axis()`
    here will add an axis to the current plot. First, pull up the help file for axis."
  CorrectAnswer: ?axis
  AnswerTests: omnitest(correctExpr='?axis')
  Hint: ?axis 

- Class: cmd_question
  Output: "To add an axis, you need to specify a minimum of two things. First, which
    side of the plot you want to put the axis (1=below, 2=left, 3=above and 4=right).
    Then, you need to provide where you want to put the ticks and labels, indicated by 
    the argument `at = `. Let's add an axis to the x (bottom) side of our plot, with
    numbers at 20, 21, and 22."
  CorrectAnswer: axis(side = 1, at = c(20, 21, 22))
  AnswerTests: omnitest(correctExpr='axis(side = 1, at = c(20, 21, 22))')
  Hint: axis(side = 1, at = c(20, 21, 22))

- Class: text
  Output: "`axis()` has another useful argument, `labels = `, if you wanted to add
    labels different to the values where the tick marks are located, for example some
    text, the log of the values, or some other characters."
    
- Class: cmd_question
  Output: "So now we have an axis, but no label. We can add text to any margin of a
    plot using the function `mtext()`. Much like `axis()`, this function requires
    a side, but also needs a margin line number (`line = `; recall our use of `mgp = ` above), 
    and the actual text of the label (`text = `). 
    Use `mtext()` to add a label to the x axis, with `text = 'Tarsus (mm)'`, and `line = 2.5'`."
  CorrectAnswer: mtext(side = 1, text = 'Tarsus (mm)', line = 2.5)
  AnswerTests: omnitest(correctExpr='mtext(side = 1, text = "Tarsus (mm)", line = 2.5)')
  Hint: mtext(side = 1, text = 'Tarsus (mm)', line = 2.5) 

- Class: text
  Output: "## Fonts"
    
- Class: text
  Output: "You can explore the other options for margin labels at your leisure. 
          Let's wrap up with a quick discussion of fonts."

- Class: text
  Output: "Many journals require specific fonts in their graphics. Fonts in R (and other 
    software) are often tricky, because each graphics device (e.g., pdf, png, ...) has its
    own default fonts and system of dealing with fonts. Further, font can be specified in 
    several different ways, and of course there is no universal system of naming or calling fonts
    in computer operating systems. Yay ..."
    
- Class: cmd_question
  Output: "However, there are some straightforward things we can do easily.
    First, within `par()` we can decide whether to use a plain  (1, default), bold (2), italic (3), 
    or bold italic font (4) for the title, axis labels, and axis tick labels. 

    We can combine this argument with a call to `mtext()` (because `mtext()` also has an ellipsis
    argument) to add a **bold** label to our x axis. Scroll up in the console and add
    `font = 2` to your call to `mtext()`."
  CorrectAnswer: mtext(side = 1, text = 'Tarsus (mm)', line = 2.5, font = 2)
  AnswerTests: omnitest(correctExpr='mtext(side = 1, text = "Tarsus (mm)", line = 2.5, font = 2)')
  Hint: mtext(side = 1, text = 'Tarsus (mm)', line = 2.5, font = 2) 
      
- Class: text
  Output: "R overlays this second call to `mtext()` on top of the first, which does not look great, 
    but you get the idea. This overlaying issue is also why you often need to re-run the entire
    code that generates a figure if you decide to change some options."
    
- Class: text
  Output: "You can change the font style (plain/bold/italic) for each part of a graphic
    using `font.axis = `, `font.lab = `, `font.main = `, and `font.sub `."
    
- Class: text
  Output: "In many graphics devices, you can also specify the family (serif (often [Times New Romas](https://en.wikipedia.org/wiki/Times_New_Roman)), 
    san-serif (often [Helvetica](https://en.wikipedia.org/wiki/Helvetica)), monotype (often [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)))) 
    via the argument `family = 'serif'`,  `family = 'sans'`, or `family = 'mono'`."
    
    
- Class: text
  Output: "Recently, a new R package was released that allows you to access the majority 
    of other fonts on your computer: the extrafonts package. Explore this if you want to 
    add non-standard fonts to your graphics: http://blog.revolutionanalytics.com/2012/09/how-to-use-your-favorite-fonts-in-r-charts.html"

- Class: text
  Output: "That's all for now! You now know how to make some more advanced modifications to your basic plots."
    

- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: Delighted, I'm sure.
  CorrectAnswer: Delighted, I'm sure.
  AnswerTests: submit_log()
  Hint: hint



